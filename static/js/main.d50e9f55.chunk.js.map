{"version":3,"sources":["reportWebVitals.js","constants.js","containers/App.js","actions.js","reducers.js","serviceWorkerRegistration.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILURE","CardList","React","lazy","SearchBox","Scroll","ErrorBoundary","App","this","props","onRobotsRequest","searchField","onSearchRobot","robots","isPending","filteredRobots","filter","robot","name","toLowerCase","includes","className","fallback","searchrobot","Component","connect","r","sfReducer","rrReducer","error","o","t","type","payload","sfAction","target","value","dispatch","fetch","response","json","users","catch","initialStateSf","initialStateRr","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","rootReducer","combineReducers","e","store","createStore","applyMiddleware","thunkMiddleWare","logger","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d50e9f55.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export const CHANGE_SEARCH_FIELD=\"CHANGE_SEARCH_FIELD\";export const REQUEST_ROBOTS_PENDING=\"REQUEST_ROBOTS_PENDING\";export const REQUEST_ROBOTS_SUCCESS=\"REQUEST_ROBOTS_SUCCESS\";export const REQUEST_ROBOTS_FAILURE=\"REQUEST_ROBOTS_FAILURE\";\r\n","import React,{Component,Suspense}from\"react\";import\"./App.css\";import{connect}from\"react-redux\";import{sfAction,rrAction}from\"../actions\";const CardList=React.lazy(()=>import(\"../components/CardList\")),SearchBox=React.lazy(()=>import(\"../components/SearchBox\")),Scroll=React.lazy(()=>import(\"../components/Scroll\")),ErrorBoundary=React.lazy(()=>import(\"../components/ErrorBoundary\")),mapStateToProps=r=>({searchField:r.sfReducer.searchField,robots:r.rrReducer.robots,isPending:r.rrReducer.isPending,error:r.rrReducer.error}),mapDispatchToProps=r=>({onSearchRobot:o=>sfAction(r,o.target.value),onRobotsRequest:()=>r(rrAction())});\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRobotsRequest()\r\n  }\r\n  render() {\r\n    const {searchField,onSearchRobot,robots,isPending} = this.props\r\n    const filteredRobots = robots.filter((robot)=>{\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    })\r\n    if(isPending){\r\n      return <h1 className='tc'>Loading!</h1>\r\n    } else {\r\n      return (\r\n        <div className='tc'> <h1>RoboSearch</h1> <Suspense fallback={<div>Chargement...</div>}> <SearchBox searchrobot={onSearchRobot}/> <Scroll> <ErrorBoundary> <CardList robots={filteredRobots}/> </ErrorBoundary> </Scroll> </Suspense> </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILURE} from './constants'\r\n\r\nexport const sfAction=(o,t)=>o({type:CHANGE_SEARCH_FIELD,payload:t});\r\n\r\nexport const rrAction = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING})\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users =>dispatch({type: REQUEST_ROBOTS_SUCCESS, payload:users}))\r\n        .catch(error =>dispatch({type: REQUEST_ROBOTS_FAILURE, payload:error}))\r\n}","import {CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILURE} from './constants'\r\n\r\nconst initialStateSf={searchField:\"\"};\r\n\r\nexport const sfReducer=(e=initialStateSf,t={})=>{switch(t.type){case CHANGE_SEARCH_FIELD:return{...e,searchField:t.payload};default:return e}};\r\n\r\nconst initialStateRr={isPending:!0,robots:[],error:\"\"};\r\n\r\nexport const rrReducer=(e=initialStateRr,r={})=>{switch(r.type){case REQUEST_ROBOTS_PENDING:return{...e,isPending:!0};case REQUEST_ROBOTS_SUCCESS:return{...e,isPending:!1,robots:r.payload};case REQUEST_ROBOTS_FAILURE:return{...e,isPending:!1,error:r.payload};default:return e}};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}","import React from\"react\";import ReactDOM from\"react-dom\";import\"./index.css\";import reportWebVitals from\"./reportWebVitals\";import\"tachyons\";import App from\"./containers/App\";import{Provider}from\"react-redux\";import{sfReducer,rrReducer}from\"./reducers\";import{createStore,applyMiddleware,combineReducers}from\"redux\";import logger from\"redux-logger\";import thunkMiddleWare from\"redux-thunk\";import * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nconst rootReducer=combineReducers({sfReducer:sfReducer,rrReducer:rrReducer}),store=createStore(rootReducer,applyMiddleware(thunkMiddleWare,logger));\r\nReactDOM.render(\r\n  <React.StrictMode> <Provider store={store}> <App/> </Provider> </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}